<!-- Authentication Section -->
<style>
    /* Hide browser-default password reveal icon */
    input[type="password"]::-ms-reveal,
    input[type="password"]::-ms-clear {
        display: none;
    }
    input[type="password"]::-webkit-reveal {
        display: none;
    }
</style>
<section id="auth-section" class="dashboard-section space-y-6">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 sm:gap-0">
        <h2 class="text-2xl font-bold tracking-tight">Authentication</h2>
        <div class="flex items-center w-full sm:w-auto gap-2">
            <a target="_blank" href="/auth.html" class="flex-1 sm:flex-initial inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-3">
                <i class="fas fa-user mr-2"></i> Login Page
            </a>
            <button id="refresh-users" class="flex-1 sm:flex-initial inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-3">
                <i class="fas fa-sync-alt mr-2"></i> <span>Refresh</span>
            </button>
            <button id="setting-btn" class="flex-1 sm:flex-initial inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-3">
                <i class="fas fa-cog mr-2"></i> Setting
            </button>
        </div>
    </div>

    <div class="grid gap-4 md:grid-cols-3">
        <div class="bg-card rounded-lg border border-border shadow-sm p-4 flex flex-col items-center justify-center">
            <div class="rounded-full bg-primary/10 p-3 mb-3">
                <i class="fas fa-users text-primary text-xl"></i>
            </div>
            <div class="text-2xl font-bold" id="total-users">-</div>
            <p class="text-sm text-muted-foreground">Total Users</p>
        </div>
        <div class="bg-card rounded-lg border border-border shadow-sm p-4 flex flex-col items-center justify-center">
            <div class="rounded-full bg-primary/10 p-3 mb-3">
                <i class="fas fa-user-check text-primary text-xl"></i>
            </div>
            <div class="text-2xl font-bold" id="confirmed-users">-</div>
            <p class="text-sm text-muted-foreground">Verified Users</p>
        </div>
        <div class="bg-card rounded-lg border border-border shadow-sm p-4 flex flex-col items-center justify-center">
            <div class="rounded-full bg-primary/10 p-3 mb-3">
                <i class="fas fa-calendar-alt text-primary text-xl"></i>
            </div>
            <div class="text-2xl font-bold" id="new-users-today">-</div>
            <p class="text-sm text-muted-foreground">New Today</p>
        </div>
    </div>

    <!-- User Management -->
    <div class="bg-card rounded-lg border border-border shadow-sm overflow-hidden">
        <div class="p-4 border-b border-border flex items-center justify-between">
            <h3 class="font-medium">User Management</h3>
            <div class="flex space-x-2">
                <div class="relative">
                    <input type="text" id="user-search" placeholder="Search users..." class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" />
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <i class="fas fa-search text-muted-foreground"></i>
                    </div>
                </div>            
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                <tr class="bg-muted/50">
                    <th class="text-left p-3 text-sm font-medium text-muted-foreground cursor-pointer hover:text-foreground" data-sort="email">Email <i class="fas fa-sort"></i></th>
                    <th class="text-left p-3 text-sm font-medium text-muted-foreground cursor-pointer hover:text-foreground" data-sort="is_active">Status <i class="fas fa-sort"></i></th>
                    <th class="text-left p-3 text-sm font-medium text-muted-foreground cursor-pointer hover:text-foreground" data-sort="provider">Provider <i class="fas fa-sort"></i></th>
                    <th class="text-left p-3 text-sm font-medium text-muted-foreground cursor-pointer hover:text-foreground" data-sort="created_at">Created At <i class="fas fa-sort"></i></th>
                    <th class="text-left p-3 text-sm font-medium text-muted-foreground cursor-pointer hover:text-foreground" data-sort="last_sign_in_at">Last Sign In <i class="fas fa-sort"></i></th>
                    <th class="text-right p-3 text-sm font-medium text-muted-foreground">Actions</th>
                </tr>
                </thead>
                <tbody id="users-table-body" class="divide-y divide-border">
                <tr>
                    <td colspan="6" class="p-6 text-center text-muted-foreground">Loading users...</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="p-4 border-t border-border flex items-center justify-between">
            <div class="text-sm text-muted-foreground">
                Total <span id="users-count">0</span> users
            </div>
            <div class="flex items-center space-x-2">
                <button id="prev-page" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 w-9">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="text-sm text-muted-foreground min-w-[80px] text-center">
                    <span id="current-page">1</span> / <span id="total-pages">1</span>
                </div>
                <button id="next-page" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 w-9">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</section>

<!-- Setting Modal -->
<div id="setting-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50">
    <div class="bg-card rounded-lg shadow-lg w-full max-w-lg p-6 space-y-4 transform transition-all scale-95 opacity-0">
        <div class="flex justify-between items-center">
            <h3 class="text-lg font-medium">Authentication Settings</h3>
            <button id="setting-close-btn" class="text-muted-foreground hover:text-foreground">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="setting-form" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="space-y-2 col-span-2">
                    <h4 class="font-medium text-primary">Google</h4>
                </div>
                <div class="space-y-2">
                    <label for="google-client-id" class="text-sm font-medium">Client ID</label>
                    <input type="text" id="google-client-id" name="google_client_id" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                </div>
                <div class="space-y-2">
                    <label for="google-client-secret" class="text-sm font-medium">Client Secret</label>
                    <div class="relative">
                        <input type="password" id="google-client-secret" name="google_client_secret" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10">
                        <button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground" onclick="togglePasswordVisibility('google-client-secret')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                <div class="space-y-2 col-span-2">
                    <label for="google-redirect-url" class="text-sm font-medium">Redirect URL</label>
                    <input type="text" id="google-redirect-url" name="google_redirect_url" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                </div>

                <div class="space-y-2 col-span-2 border-t pt-4">
                    <h4 class="font-medium text-primary">GitHub</h4>
                </div>
                <div class="space-y-2">
                    <label for="github-client-id" class="text-sm font-medium">Client ID</label>
                    <input type="text" id="github-client-id" name="github_client_id" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                </div>
                <div class="space-y-2">
                    <label for="github-client-secret" class="text-sm font-medium">Client Secret</label>
                    <div class="relative">
                        <input type="password" id="github-client-secret" name="github_client_secret" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10">
                        <button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground" onclick="togglePasswordVisibility('github-client-secret')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                <div class="space-y-2 col-span-2">
                    <label for="github-redirect-url" class="text-sm font-medium">Redirect URL</label>
                    <input type="text" id="github-redirect-url" name="github_redirect_url" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                </div>
            </div>

            <div class="flex justify-end space-x-2 pt-4">
                <button type="button" id="setting-cancel-btn" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 px-4 border border-input bg-background hover:bg-accent hover:text-accent-foreground">
                    Cancel
                </button>
                <button type="submit" id="setting-save-btn" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-9 px-4 bg-primary text-primary-foreground hover:bg-primary/90">
                    <i class="fas fa-save mr-2"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Edit User Modal -->
<div id="edit-user-modal" class="fixed inset-0 bg-black/50 hidden items-center justify-center">
    <div class="bg-background rounded-lg shadow-lg w-full max-w-md p-6 space-y-4">
        <h3 class="text-lg font-medium">Edit User</h3>
        <form id="edit-user-form" class="space-y-4">
            <input type="hidden" id="edit-user-id">
            <div class="space-y-2">
                <label for="edit-user-email" class="text-sm font-medium">Email</label>
                <input type="email" id="edit-user-email" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" readonly>
            </div>
            <div class="space-y-2">
                <label for="edit-user-name" class="text-sm font-medium">Name</label>
                <input type="text" id="edit-user-name" class="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
            </div>
            <div class="flex items-center space-x-2">
                <input type="checkbox" id="edit-user-active" class="h-4 w-4 rounded border-border text-primary focus:ring-primary">
                <label for="edit-user-active" class="text-sm font-medium">Active</label>
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" id="edit-user-cancel" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4">
                    Cancel
                </button>
                <button type="submit" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-4">
                    Save Changes
                </button>
            </div>
        </form>
    </div>
</div>
<script src="/assets/js/common.js"></script>
<script>
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Loading state management
    function setLoading(loading) {
        const refreshBtn = document.getElementById('refresh-users');
        const icon = refreshBtn.querySelector('i');
        const span = refreshBtn.querySelector('span');
        
        refreshBtn.disabled = loading;
        if (loading) {
            icon.className = 'fas fa-spinner fa-spin mr-2';
            span.textContent = 'Refreshing...';
        } else {
            icon.className = 'fas fa-sync-alt mr-2';
            span.textContent = 'Refresh';
        }
    }

    // State management
    let currentState = {
        search: '',
        sort_by: 'id',
        sort_order: 'ASC',
        page: 1,
        per_page: 10
    };

    // Initialize refresh button with debounce
    const refreshBtn = document.getElementById('refresh-users');
    const debouncedRefresh = debounce(() => {
        currentState.page = 1; // Reset to first page
        loadUsers();
    }, 300);
    refreshBtn.addEventListener('click', debouncedRefresh);

    // Initialize search with debounce
    const searchInput = document.getElementById('user-search');
    let searchTimeout;
    searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            currentState.search = searchInput.value;
            currentState.page = 1; // Reset to first page on search
            loadUsers();
        }, 300);
    });

    // Initialize sorting
    document.querySelectorAll('th[data-sort]').forEach(th => {
        th.addEventListener('click', () => {
            const sortField = th.getAttribute('data-sort');
            if (currentState.sort_by === sortField) {
                currentState.sort_order = currentState.sort_order === 'ASC' ? 'DESC' : 'ASC';
            } else {
                currentState.sort_by = sortField;
                currentState.sort_order = 'ASC';
            }
            updateSortIcons();
            loadUsers();
        });
    });

    // Update sort icons
    function updateSortIcons() {
        document.querySelectorAll('th[data-sort]').forEach(th => {
            const sortField = th.getAttribute('data-sort');
            const icon = th.querySelector('i.fas');
            if (sortField === currentState.sort_by) {
                icon.className = `fas fa-sort-${currentState.sort_order.toLowerCase()}`;
            } else {
                icon.className = 'fas fa-sort';
            }
        });
    }

    // Initialize pagination
    document.getElementById('prev-page').addEventListener('click', () => {
        if (currentState.page > 1) {
            currentState.page--;
            loadUsers();
        }
    });

    document.getElementById('next-page').addEventListener('click', () => {
        currentState.page++;
        loadUsers();
    });

    loadUsers();
    // Function to load users data for Authentication section
    async function loadUsers() {
        try {
            setLoading(true);
            // Show loading state
            document.getElementById('total-users').textContent = '-';
            document.getElementById('confirmed-users').textContent = '-';
            document.getElementById('new-users-today').textContent = '-';
            document.getElementById('users-table-body').innerHTML = '<tr><td colspan="6" class="p-6 text-center text-muted-foreground">Loading users...</td></tr>';

            // Fetch users data
            const params = { ...currentState };
            const queryString = new URLSearchParams(params).toString();
            const response = await fetch(`/admin/users?${queryString}`);

            if (response.ok) {
                const { data } = await response.json();
                const { users, stats, total } = data;

                // Update stats
                document.getElementById('total-users').textContent = stats.total_users;
                document.getElementById('confirmed-users').textContent = stats.verified_users;
                document.getElementById('new-users-today').textContent = stats.today_new_users;
                document.getElementById('users-count').textContent = total;

                // Calculate total pages
                const totalPages = Math.ceil(total / currentState.per_page);
                document.getElementById('current-page').textContent = currentState.page;
                document.getElementById('total-pages').textContent = totalPages;

                // Update pagination buttons
                document.getElementById('prev-page').disabled = currentState.page <= 1;
                document.getElementById('next-page').disabled = currentState.page >= totalPages;

                // Update users table
                if (users.length > 0) {
                    const tableBody = document.getElementById('users-table-body');
                    tableBody.innerHTML = '';

                    users.forEach(user => {
                        const row = document.createElement('tr');
                        row.className = 'hover:bg-muted/50';

                        // Format dates
                        const createdAt = new Date(user.created_at).toLocaleString();
                        const lastSignIn = user.last_sign_in_at ? new Date(user.last_sign_in_at).toLocaleString() : 'Never';

                        // Determine status class
                        let statusClass = 'bg-amber-500/10 text-amber-500';
                        if (user.is_active) {
                            statusClass = 'bg-green-500/10 text-green-500';
                        }

                        row.innerHTML = `
                                    <td class="p-3 text-sm">${user.email}</td>
                                    <td class="p-3 text-sm">
                                        <span class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ${statusClass}">
                                            ${user.is_active ? 'Active' : 'Inactive'}
                                        </span>
                                    </td>
                                    <td class="p-3 text-sm">${user.provider}</td>
                                    <td class="p-3 text-sm text-muted-foreground">${user.created_at}</td>
                                    <td class="p-3 text-sm text-muted-foreground">${user.last_sign_in_at || '-'}</td>
                                    <td class="p-3 text-sm text-right">
                                        <div class="flex items-center justify-end space-x-2">
                                            <button class="text-muted-foreground hover:text-foreground edit-user-btn mr-3" title="Edit User" data-user-id="${user.id}">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="text-muted-foreground hover:text-destructive delete-user-btn" title="Delete User" data-user-id="${user.id}">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                `;

                        tableBody.appendChild(row);
                    });

                    // Add event listeners to edit and delete buttons
                    document.querySelectorAll('.edit-user-btn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const userId = e.currentTarget.getAttribute('data-user-id');
                            editUser(userId);
                        });
                    });

                    document.querySelectorAll('.delete-user-btn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const userId = e.currentTarget.getAttribute('data-user-id');
                            deleteUser(userId);
                        });
                    });
                } else {
                    document.getElementById('users-table-body').innerHTML = '<tr><td colspan="6" class="p-6 text-center text-muted-foreground">No users found</td></tr>';
                }
            } else {
                const errorData = await response.json();
                showMessage(`Error loading users: ${errorData.message || 'Unknown error'}`, 'error');
                document.getElementById('users-table-body').innerHTML = '<tr><td colspan="6" class="p-6 text-center text-destructive">Error loading users</td></tr>';
            }
        } catch (error) {
            showMessage(`Error loading users: ${error.message}`, 'error');
            document.getElementById('users-table-body').innerHTML = '<tr><td colspan="6" class="p-6 text-center text-destructive">Error loading users</td></tr>';
        } finally {
            setLoading(false);
        }
    }

    // Function to edit user
    async function editUser(userId) {
        try {
            const response = await fetch(`/admin/user/${userId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch user data');
            }

            const { data } = await response.json();
            
            // Populate modal form
            document.getElementById('edit-user-id').value = data.id;
            document.getElementById('edit-user-email').value = data.email;
            document.getElementById('edit-user-name').value = data.name || '';
            document.getElementById('edit-user-active').checked = data.is_active;

            // Show modal
            const modal = document.getElementById('edit-user-modal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        } catch (error) {
            showMessage(`Error loading user: ${error.message}`, 'error');
        }
    }

    // Initialize edit user modal
    const editModal = document.getElementById('edit-user-modal');
    const editForm = document.getElementById('edit-user-form');
    const editCancelBtn = document.getElementById('edit-user-cancel');

    // Close modal on cancel
    editCancelBtn.addEventListener('click', () => {
        editModal.classList.remove('flex');
        editModal.classList.add('hidden');
    });

    // Close modal on outside click
    editModal.addEventListener('click', (e) => {
        if (e.target === editModal) {
            editModal.classList.remove('flex');
            editModal.classList.add('hidden');
        }
    });

    // Handle form submission
    editForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const userId = document.getElementById('edit-user-id').value;
        const data = {
            name: document.getElementById('edit-user-name').value,
            is_active: document.getElementById('edit-user-active').checked
        };

        try {
            const response = await fetch(`/admin/user/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to update user');
            }

            showMessage('User updated successfully', 'success');
            editModal.classList.remove('flex');
            editModal.classList.add('hidden');
            await loadUsers(); // Reload the user list
        } catch (error) {
            showMessage(`Error updating user: ${error.message}`, 'error');
        }
    });

    // Function to delete user
    async function deleteUser(userId) {
        if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
            try {
                const response = await fetch(`/admin/user/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    showMessage('User deleted successfully', 'success');
                    await loadUsers(); // Reload users list
                } else {
                    const errorData = await response.json();
                    showMessage(`Error deleting user: ${errorData.message || 'Unknown error'}`, 'error');
                }
            } catch (error) {
                showMessage(`Error deleting user: ${error.message}`, 'error');
            }
        }
    }

    // --- Settings Modal Logic ---
    const settingBtn = document.getElementById('setting-btn');
    const settingModal = document.getElementById('setting-modal');
    const settingModalContent = settingModal.querySelector('.transform');
    const settingCloseBtn = document.getElementById('setting-close-btn');
    const settingCancelBtn = document.getElementById('setting-cancel-btn');
    const settingForm = document.getElementById('setting-form');
    const settingSaveBtn = document.getElementById('setting-save-btn');

    function openSettingModal() {
        settingModal.classList.remove('hidden');
        settingModal.classList.add('flex');
        setTimeout(() => {
            if(settingModalContent) {
                settingModalContent.classList.remove('scale-95', 'opacity-0');
            }
        }, 10);

        // Fetch current settings
        fetch('/admin/auth/setting')
            .then(response => response.json())
            .then(data => {
                if (data.code===200) {
                    document.getElementById('google-client-id').value = data.data.settings.GOOGLE_CLIENT_ID || '';
                    document.getElementById('google-client-secret').value = data.data.settings.GOOGLE_CLIENT_SECRET || '';
                    document.getElementById('google-redirect-url').value = data.data.settings.GOOGLE_REDIRECT_URL || '';
                    document.getElementById('github-client-id').value = data.data.settings.GITHUB_CLIENT_ID || '';
                    document.getElementById('github-client-secret').value = data.data.settings.GITHUB_CLIENT_SECRET || '';
                    document.getElementById('github-redirect-url').value = data.data.settings.GITHUB_REDIRECT_URL || '';
                } else {
                    showMessage('Error fetching settings: ' + data.message, 'error');
                }
            })
            .catch(err => {
                showMessage('Error fetching settings.', 'error');
                console.error(err);
            });
    }

    function closeSettingModal() {
        if(settingModalContent) {
            settingModalContent.classList.add('scale-95', 'opacity-0');
        }
        setTimeout(() => {
            settingModal.classList.add('hidden');
            settingModal.classList.remove('flex');
        }, 300);
    }

    if(settingBtn) settingBtn.addEventListener('click', openSettingModal);
    if(settingCloseBtn) settingCloseBtn.addEventListener('click', closeSettingModal);
    if(settingCancelBtn) settingCancelBtn.addEventListener('click', closeSettingModal);

    window.togglePasswordVisibility = function(inputId) {
        const input = document.getElementById(inputId);
        const icon = input.nextElementSibling.querySelector('i');
        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    }

    if(settingForm) {
        settingForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(settingForm);
            const data = Object.fromEntries(formData.entries());

            const originalBtnHtml = settingSaveBtn.innerHTML;
            settingSaveBtn.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i> Saving...`;
            settingSaveBtn.disabled = true;

            fetch('/admin/auth/setting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(result => {
                if (result.code===200) {
                    showMessage('Settings saved successfully!', 'success');
                    closeSettingModal();
                } else {
                    showMessage('Error saving settings: ' + result.message, 'error');
                }
            })
            .catch(error => {
                showMessage('An unexpected error occurred.', 'error');
                console.error('Error:', error);
            })
            .finally(() => {
                settingSaveBtn.innerHTML = originalBtnHtml;
                settingSaveBtn.disabled = false;
            });
        });
    }
</script>